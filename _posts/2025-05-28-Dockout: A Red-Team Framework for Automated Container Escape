---
title: "Dockout: A Red-Team Framework for Automated Container Escape"
date: 2025-05-28
categories: PROJECTS
description: "Dockout is a structured and safety-conscious framework for automating container escape techniques. This post outlines the rationale, design, and implementation of a red-teamâ€“oriented PoC system."
tags: [Docker Security, Red Teaming, Exploit Framework, Secure PoC Automation]
---

## Introduction

Container escape remains a critical area in offensive security, particularly as containerized infrastructure becomes more common in production environments.  

While several public proof-of-concept (PoC) scripts and research articles exist for known escape techniques, many are designed for isolated testing and are not intended for broader operational use or integration into red-team workflows.

**[Dockout](https://github.com/schoi1337/dockout)** was developed to address this gap by providing:

- A modular and extensible PoC framework
- Safe simulation capabilities to support learning and CI integration
- Structured logging and reporting for traceability and audit

This post outlines the design and implementation of Dockout, including the trade-offs made to balance functionality, safety, and usability.

## Project Objectives

From the outset, the framework was designed with three priorities:

1. **Support for real exploit execution** in controlled environments  
2. **Simulation mode** to validate logic without modifying the host  
3. **Consistency and safety** through CLI prompts and structured output

The goal was to provide a system suitable for both individual testing and operational use within red-team workflows.

## Architecture

Dockout uses a modular approach where each PoC is implemented as a standalone plugin.  
Each module follows a simple interface contract:

```python
def simulate(): ...
def exploit(): ...
```

The CLI automatically detects available modules and supports:
- `--simulate` to preview exploit logic
- `--unsafe` to enable real execution (with confirmation)
- `--auto` for batch execution of supported modules
- HTML and JSON report generation for traceability

The directory structure:

```plaintext
src/
â”œâ”€â”€ core.py             # CLI entry point
â”œâ”€â”€ attacks/            # PoC modules (e.g. cve_2019_5736.py)
â”œâ”€â”€ reporting/          # Report generation logic
â”œâ”€â”€ utils/              # Shared utilities
â””â”€â”€ dev_targets/        # Docker environments for testing
```

## Exploit Coverage

The following proof-of-concept modules are currently implemented within Dockout:

| Technique / CVE           | Filename                   | Description                                             | Execution Mode | Simulation Support |
|---------------------------|----------------------------|---------------------------------------------------------|----------------|---------------------|
| CVE-2019-5736             | `cve_2019_5736.py`         | runc overwrite via `/proc/self/exe`                     | ðŸŸ¢ Real        | âœ… Supported         |
| Docker Socket Abuse       | `docker_socket_abuse.py`   | Host takeover via `docker.sock`                         | ðŸŸ¢ Real        | âœ… Supported         |
| CAP_SYS_PTRACE            | `cap_abuse.py`             | Strace container PID for host-level access              | ðŸŸ¢ Real        | âœ… Supported         |
| OverlayFS (CVE-2023-0386) | `overlayfs.py`             | Read-only overwrite using OverlayFS mount bypass        | ðŸŸ¡ Simulated   | âœ… Supported         |
| CVE-2021-3156             | `sudoedit.py`              | Heap overflow via `sudoedit`                            | ðŸŸ¡ Simulated   | âœ… Supported         |
| CVE-2020-13409            | `cve_2020_13409.py`        | Mount attack through writable docker.sock               | ðŸŸ¡ Simulated   | âœ… Supported         |
| CVE-2020-15257            | `cve_2020_15257.py`        | Overwrite `/root` via privileged container write access | ðŸŸ¡ Simulated   | âœ… Supported         |
| Writable Cgroup           | `writable_cgroup.py`       | Escape via `notify_on_release` in writable cgroup       | ðŸŸ¡ Simulated   | âœ… Supported         |
| Dirty Pipe (CVE-2022-0847)| `dirty_pipe_escalation.py` | Overwrite read-only files using Dirty Pipe              | ðŸŸ¡ Simulated   | âœ… Supported         |


## Report Generation

To ensure the tool remains usable in operational and educational settings, Dockout includes:
- HTML reports with time-stamped actions and results
- JSON reports for integration with external pipelines
- Risk levels and execution recommendations per exploit

This enables users to review results safely, share internally, or store artifacts for audit purposes.

## Development Considerations

Key decisions during development included:
- Each module supports both simulation and real execution paths with logging.
- Key decisions during development included:
- Implementing interactive confirmation prompts for all real exploits
- Separating simulation logic to support CI-based validation
- Using modular file structure to simplify maintenance and future extensions
- Avoiding hardcoded assumptions about the container runtime or host OS

## Lessons Learned

- Designing with safety and reproducibility in mind leads to better tooling
- Plugin-based systems improve clarity, scalability, and maintainability
- Structured reporting is essential not only for documentation, but also for security validation and collaboration
- Simulation can be a powerful method to learn and test offensive concepts without causing unintended side effects

## Conclusion

Dockout is a continuing effort to bridge the gap between research-grade PoCs and production-grade security tooling.
While the framework is already capable of executing several well-known container escapes, the real value lies in its extensibility and safe-by-default design.

The project is available publicly:

> â†’ GitHub: [Dockout](https://github.com/schoi1337/dockout)

